{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pawpd docs","text":"<p>Write concise sections for each public piece of the library under <code>docs/</code>.</p> <p>Quick commands: - Install: <code>pip install mkdocs mkdocs-material</code> - Preview locally: <code>mkdocs serve</code>  (open http://127.0.0.1:8000) - Build static site: <code>mkdocs build</code> - Deploy to GitHub Pages: <code>mkdocs gh-deploy</code></p> <p>Use the API checklist in api.md to manually document classes, functions and examples.</p>"},{"location":"api/","title":"API reference","text":"<p>This page follows a discord.py-like layout: class -&gt; signature -&gt; methods with signatures, parameters, return values and short examples.</p>"},{"location":"api/#pawpd-api-reference","title":"Pawpd \u2014 API reference","text":"<p>Quick jump: Client \u00b7 Command/Cog \u00b7 Message/Msg \u00b7 Other</p>"},{"location":"api/#pawpdclient","title":"pawpd.Client","text":"<p><pre><code>class Client(token, intents=None, prefix=None, builtin_help=True, logger=None)\n</code></pre> Main entry point. Connects to gateway, registers events/commands.</p> <p>Example: <pre><code>from pawpd import Client\nclient = Client(\"TOKEN\", prefix=\"!\")\n@client.event\nasync def on_ready(user):\n    print(\"Ready:\", user)\nclient.start()\n</code></pre></p> <p>Methods (compact)</p> <ul> <li>add_command(command)   <pre><code>client.add_command(Command(func, \"name\"))\n</code></pre></li> <li>get_user_voice_state(guild_id: int, user_id: int) -&gt; VoiceState</li> <li>get_voice(guild_id: int = None, channel_id: int = None) -&gt; VoiceClient | None</li> <li>get_guild(guild_id: str, fetch: bool = False) -&gt; Guild | coroutine | None</li> <li>get_user(user_id: str, fetch: bool = False) -&gt; User | coroutine | None</li> <li>get_channel(channel_id: str, fetch: bool = False) -&gt; Channel | coroutine | None</li> <li>sync(*, guild_id: Optional[int] = None) -&gt; List[Dict[str, Any]]   <pre><code>await client.sync()            # global\nawait client.sync(guild_id=1)  # guild-only\n</code></pre></li> <li>status(status: str, afk=False, activity=None, activities=[])</li> <li>event(coro) \u2014 decorator for registering async event handlers   <pre><code>@client.event\nasync def on_message_create(message): ...\n</code></pre></li> <li>command(name=None, **attrs) \u2014 decorator for text/hybrid commands   <pre><code>@client.command(\"hello\")\nasync def hello(ctx): await ctx.send(\"Hello\")\n</code></pre></li> <li>load_cog(path), unload_cog(path), reload_cog(path)</li> <li>latency() -&gt; float</li> <li>start(), start_async()</li> <li>process(event_data, _side=False) \u2014 prefix command processor (public utility)</li> </ul>"},{"location":"api/#command-cog","title":"Command / Cog","text":"<p><pre><code>class Command(func, name, ...)\nclass Cog(...)\n</code></pre> Short: <code>Command</code> wraps callable metadata for text/slash commands. <code>Cog</code> groups commands and state. Add usage examples per-command when documenting.</p>"},{"location":"api/#message-msg","title":"Message / Msg","text":"<p>Short: message-like objects for text and interactions. Common methods: <code>send</code>, <code>edit</code>, <code>delete</code>.</p>"},{"location":"api/#other-core-types-placeholders","title":"Other core types (placeholders)","text":"<ul> <li>Intents \u2014 bitfield/config helper.</li> <li>Embed \u2014 builder for rich embeds.</li> <li>Guild, User, Channel \u2014 basic containers for IDs and common properties.</li> <li>VoiceClient, VoiceState \u2014 voice connection/control and state.</li> <li>Activity, Modal, Parsers, Color, HTTPClient \u2014 helpers and utilities.</li> </ul>"},{"location":"api/#helpers-constants-and-aliases","title":"Helpers, constants and aliases","text":"<ul> <li><code>ChannelType</code>, <code>ActivityType</code>, <code>version</code></li> <li>Lowercase aliases: <code>embed</code>, <code>modal</code>, <code>button</code>, <code>activity</code>, <code>cog</code>, <code>guild</code>, <code>user</code>, <code>intents</code>, <code>msg</code>, <code>message</code>, <code>channel</code></li> <li>Color aliases: <code>color</code>, <code>colour</code>, <code>Colour</code></li> </ul> <p>Notes - Keep entries short: signature, 1\u20132 line desc, params/returns if needed, 1 short example. - Split into per-class pages later if this file grows. async def on_message_create(message):     ... <pre><code>#### command(name=None, **attrs)\nDecorator to register a text or hybrid command.\n\n- Example\n```py\n@client.command(\"hello\")\nasync def hello(ctx):\n    await ctx.send(\"Hello\")\n</code></pre></p>"},{"location":"api/#load_cogpath-unload_cogpath-reload_cogpath","title":"load_cog(path), unload_cog(path), reload_cog(path)","text":"<p>Dynamically manage cog modules by import path.</p> <ul> <li>Example <pre><code>client.load_cog(\"my_cogs.admin\")\nclient.unload_cog(\"my_cogs.admin\")\n</code></pre></li> </ul>"},{"location":"api/#latency-float","title":"latency() -&gt; float","text":"<p>Return a simple REST latency measurement in milliseconds.</p>"},{"location":"api/#start-start_async","title":"start(), start_async()","text":"<p>Start the client (blocking) or prepare session and run gateway loop (async).</p> <ul> <li>Example <pre><code>client.start()  # blocking\n# or inside async\nawait client.start_async()\n</code></pre></li> </ul>"},{"location":"api/#processevent_data-_sidefalse","title":"process(event_data, _side=False)","text":"<p>Process a message as a prefix command (internal/public utility).</p> <ul> <li>Notes: Used internally but exposed for manual invocation.</li> </ul>"},{"location":"api/#other-classes-placeholders","title":"Other classes (placeholders)","text":"<p>Create sections similar to the Client above for each symbol. Fill in short signatures, purpose, parameters, returns and examples.</p>"},{"location":"api/#command","title":"Command","text":"<ul> <li>Signature: Command(func, name, ...)</li> <li>Purpose: Wraps a callable for text/slash commands.</li> </ul>"},{"location":"api/#cog","title":"Cog","text":"<ul> <li>Signature: Cog(...)</li> <li>Purpose: Group commands and state.</li> </ul>"},{"location":"api/#message-msg_1","title":"Message, Msg","text":"<ul> <li>Purpose: Represent message objects for text and interaction contexts.</li> <li>Example methods: send, edit, delete</li> </ul>"},{"location":"api/#intents-embed-guild-user-channel","title":"Intents, Embed, Guild, User, Channel","text":"<ul> <li>Document basic usage and commonly used properties.</li> </ul>"},{"location":"api/#voiceclient-voicestate","title":"VoiceClient, VoiceState","text":"<ul> <li>Document connecting, playing, disconnecting and state properties.</li> </ul>"},{"location":"api/#activity-modal-parsers-color-httpclient","title":"Activity, Modal, Parsers, Color, HTTPClient","text":"<ul> <li>Brief usage and examples for common tasks.</li> </ul>"},{"location":"api/#helpers-constants-and-aliases_1","title":"Helpers, constants and aliases","text":"<ul> <li>ChannelType, ActivityType \u2014 enumerations for types.</li> <li>version \u2014 library version string.</li> <li>Lowercase aliases: embed, modal, button, activity, cog, guild, user, intents, msg, message, channel</li> <li>Color aliases: color, colour, Colour</li> </ul> <p>Tips - For each class/method keep entries compact: signature, 1\u20132 line description, params, returns, 1 example. - Use this file as the canonical manual reference. Split into multiple pages later (one per class) if docs grow.</p>"},{"location":"examples/","title":"PaWpD Examples","text":"<p>Yes these are specific to each library version. RIP my time</p>"},{"location":"examples/#a-simple-client","title":"A simple Client","text":"<pre><code>from pawpd import Client\n\nclient = Client(token=token)\n\nclient.start()\n</code></pre> Disclaimer PaWpD uses default intents when no intents are passed (since 1.1.0 as 1.0.0 passed All intents by default)"},{"location":"examples/#a-simple-client-with-commands-slashhybridnormal","title":"A simple Client with commands slash/hybrid/normal","text":"<pre><code>from pawpd import Client\n\nclient = Client(token=token, prefix='!')\n\n@client.command()\nasync def normal_command(msg):\n  await msg.send('Hi')\n\n@client.command(hybrid=True)\nasync def hybrid_command(msg):\n  await msg.send('Hi')\n\n@client.command(slash=True)\nasync def slash_command(msg):\n  await msg.send('Hi again')\n\nclient.start()\n</code></pre> Disclaimer PaWpD commands will be unavailable if you fail to pass prefix value"},{"location":"examples/#a-simple-client-with-embed","title":"A simple Client with embed","text":"<pre><code>from pawpd import Client, Embed, Color\n\nclient = Client(token=token, prefix=prefix)\n\n@client.command()\nasync def embed(msg):\n  embed = Embed(title='Hello', color=Color.Red())\n  embed.add_field(name='h', value='I am an embed')\n  embed.set_footer(text='Just an embed')\n  embed.set_thumbnail(url='a random url pointing to a image')\n  embed.set_author(name='Ya')\n  await msg.send(embed=embed)\n  # To send multiple embeds do\n  await msg.send(embeds=[embed, embed])\n\nclient.start()\n</code></pre>"},{"location":"examples/#a-simple-client-with-music-playing-capabilities","title":"A simple Client with music playing capabilities","text":"Warning Before trying voice. Please ensure you have read the Voice page  <pre><code>from pawpd import Client\nimport asyncio\n\nclient = Client(token=token, prefix=prefix)\n\n@client.command()\nasync def play(msg):\n  # I am sorry for this but PaWpD doesnt include a full users cache yet but am planning to add it and it will be included in 1.2.0 which is the next update I'll release\n  voice_state = await client.get_user_voice_state(guild_id=msg.guild.id, user_id=msg.author.id) # This makes a request to discord api. In 1.2.0 it will use cache additionaly msg.author.voice will be available\n\n  # We have channel id and we need channel\n  channel = await client.get_channel(channel_id=voice_state.channel_id, fetch=True) # Also fetches because channels cache also doesn't exist. Sorry for that also. Normally you wouldn't use await if fetch was False\n\n  # Normal now\n  vc = await channel.connect() # This will connect to channel with best protocol available but you can specify protocol you want here. Will also reconnect 3 times (default) when connection fails\n\n  while vc.is_connecting:\n    await asyncio.sleep(0.1)\n  await vc.play(\"music.mp3\") # No url support yet :&lt;\n  # all vc functions are non blocking\n  await msg.send('Playing music')\n\n@client.command()\nasync def pause(msg):\n  vc = client.get_voice(guild_id=msg.guild.id)\n  await vc.pause()\n  await msg.send('paused')\n\n@client.command()\nasync def resume(msg):\n  vc = client.get_voice(guild_id=msg.guild.id)\n  await vc.resume()\n  await msg.send('resumed')\n\n@client.command()\nasync def disconnect(msg):\n  vc = client.get_voice(guild_id=msg.guild.id)\n  await vc.disconnect()\n  await msg.send('Disconnected')\n\n@client.command()\nasync def stop(msg):\n  vc = client.get_voice(guild_id=msg.guild.id)\n  await msg.stop_audio() # might rename it in the future to just stop\n  await msg.send('Music stopped')\n</code></pre>"},{"location":"voice/","title":"Before using voice","text":"<p>Please ensure you have done the following:</p> <ul> <li>Installed the required packages</li> </ul> <p>PaWpD in order to save storage is shipped without all packages required for voice in the requirements file as some people doesn't use the voice and the packages may slow down their code.</p> <p>Packages - PyNaCl - For Encryption support (all except DAVE) - Opuslib - Cryptography - For DAVE support</p> <p>Command to install them all <pre><code>python3 -m pip install opuslib cryptography pynacl\n</code></pre> For windows <pre><code>py -3 -m pip install opuslib cryptography pynacl\n</code></pre></p> <p>You can experiment with this as when you have cryptography pynacl might not be needed as dave support is present same backwards</p> <ul> <li>Installed ffmpeg</li> </ul> <p>This step is necesary for playing music in a channel. without it you will only be able to connect to the channel.</p> <p>ffmpeg installation isn't something PaWpD docs can help you with so here's the link to official ffmpeg documentation:</p> <p>https://www.ffmpeg.org/download.html - Access date  23 August 2025</p> <ul> <li>If you are building from source on linux</li> </ul> <p>Ensure you have installed <pre><code>sudo apt install libffi-dev python3-dev\n</code></pre> without it installing from source might fail. That's why I recommend using Wheels when installing packages</p>"},{"location":"1.0.0/","title":"Hello welcome to PaWpD.","text":"<p>Changelog for 1.0.0</p>"},{"location":"1.0.0/#whats-added","title":"What's added?","text":"<p>Nothing is added because it's the first release!</p>"},{"location":"1.0.0/#whats-pawpd","title":"What's PaWpD?","text":"<p>PaWpD is a package for creating discord bots. PaWpD is a minimal client made for performance and low latencies. </p>"},{"location":"1.0.0/#how-to-use-pawpd","title":"How to use PaWpD?","text":"<p>It's supper easy!</p> <p>First import the package <pre><code>import pawpd \n</code></pre> Then initialize the client <pre><code>client = pawpd.Client(token=\"Your discord token\")\n</code></pre> And start it! <pre><code>client.start()\n</code></pre> And that's all. PaWpD client should be now implemented!</p>"},{"location":"1.0.0/#warning-by-default-pawpd-client-uses-all-client-intents-if-you-havent-passed-intents-thru-client-value-currently-100-version-has-no-way-of-setting-other-intents-than-all-thru-client-it-has-to-be-manually-passed-example","title":"Warning by default PaWpD client uses all client intents if you haven't passed intents thru client value. Currently 1.0.0 version has no way of setting other intents than all thru client. It has to be manually passed. Example:","text":"<p><pre><code>### All intents\nclient = pawpd.Client(token=token, intents=pawpd.intents.all())\n### Any other intents must be passed manually \nclient = pawpd.Client(token=token, intents=\"intent number here\")\n</code></pre> More Intents should be implemented in next update.</p> <p>Now if you want to implement commands. All you have to do is: (Assuming the implementation above was used) <pre><code>@client.command()\nasync def hi(msg):\n    await msg.send(\"Hello\")\n</code></pre></p>"},{"location":"1.0.0/#warning-in-order-for-client-commands-to-work-you-have-to-pass-prefix-value-in-client","title":"WARNING: In order for client commands to work. You have to pass prefix value in client.","text":"<p><pre><code>client = pawpd.Client(token=\"discord token\", prefix=\"Whatever prefix you want your bot responding to\")\n</code></pre> And that's all. You should now have a command called hi which returns Hello.</p> <p>PaWpD client comes with built-in help command. Which you can call by !help (assuming bot prefix is !)</p> <p>Built-in help command lists all bot commands no matter if they are slash, hybrid.</p> <p>Built-in help command can be disabled by passing: <pre><code>builtin_help=False\n</code></pre> In client function.</p> <p>Implementing slash/hybrid commands</p> <p>Implementing these commands is super easy. This is the benefits of PaWpD.</p> <p>All you have to do is pass slash or hybrid value in command: <pre><code>### normally \n@client.command()\n### hybrid command\n@client.command(hybrid=True)\n### slash command\n@client.command(slash=True)\n</code></pre></p>"},{"location":"1.0.0/#warning-interaction-commands-slashhybrid-needs-to-he-synced-to-show-up-as-slash-commands-it-can-be-done-by","title":"WARNING: Interaction commands (slash/hybrid) needs to he synced to show up as slash commands. It can be done by:","text":"<pre><code>await client.sync()\n# or\nawait client.sync(guild_ids=[\"ids here\"])\n# to sync to specific guilds\n</code></pre> <p>The only difference between normal commands and slash/hybrid is that it allows you to use  <pre><code>await msg.defer()\n</code></pre> Also in order to respond on slash command. You have to: <pre><code>await msg.reply(message)\n# This Replies on interaction. Meanwhile\nawait msg.send(message)\n# This doesn't respond on interaction. It sends a new message in channel and keeps the interaction as not responded to.\n</code></pre></p>"},{"location":"1.0.0/#how-to-implement-an-event-in-pawpd","title":"How to implement an event in PaWpD","text":"<p>That's also super easy <pre><code>@client.event\nasync def on_ready(user):\n    # User value is Bot User that we just had logged on.\n    print(f\"Logged in as {user.username}\")\n    # This also shows how to get bot Latency. This function tests latency on your command thats why its a function and it needs to be awaited\n    latency = await client.latency()\n    print(latency) # Latency is returned in Milliseconds in Float value\n</code></pre> That's how you can implement on_ready event. This is a list of events  on_ready, on_member_join, on_member_leave, on_guild_update, on_guild_join, on_guild_leave, on_message_create, on_message_update, on_message_delete</p> <p>The value passed for events are the same as their second word from name. Example on_member_join Second word is member. So member is passed. Same for rest.</p>"},{"location":"1.0.0/#how-to-make-embeds-with-pawpd","title":"How to make Embeds with PaWpD","text":"<p>It's easy! <pre><code>embed = pawpd.Embed(title=title, description=description, color=pawpd.Color.Gray())\n### Example add Field\nembed.add_field(name=name, value=value, inline=True)\n### Example set footer\nembed.set_footer(text=text, icon_url=url)\n### Example set author\nembed.set_author(author=author, url=url, icon_url=icon_url) # Url value will be removed in next version. I hope...\n# Author value may be changed to name in next update!\n</code></pre> Now to send an embed <pre><code>await msg.send(embed=embed)\n# or embeds if multiple\nawait msg.send(embeds=[embed, embed2])\n</code></pre></p> <p>Every value is nearly same for any functions. Have fun using PaWpD. We hope this project will grow big and you will like it!</p>"},{"location":"1.0.0/api/","title":"Api","text":"<p>This didn't exist in 1.0.0 docs return to Home</p>"},{"location":"1.0.0/examples/","title":"Examples","text":"<p>This also didn't exist in 1.0.0 docs return to Home</p>"},{"location":"1.1.0/","title":"Pawpd docs \u2014 v1.1.0","text":"<p>This is an example versioned docs landing page for Pawpd v1.1.0.</p> <p>Quick links: - API: /1.1.0/api.html (or whatever path your static host uses)</p> <p>Notes: - To publish this version to /1.1.0/ build the site for this docs source and upload to your web host under the /1.1.0/ path.</p>"},{"location":"global/introduction/","title":"Introduction","text":""},{"location":"global/introduction/#hello-welcomen-to-pawpd","title":"Hello welcomen to PaWpD","text":"<p>Thanks for choosing PaWpD. It's a pleasure to see you use my package. Currently the status of project is half finished. This means most of features exists but some doesn't but are indeed planned. These docs were made manually by me so please pardon my poor English grammar or speech as my nationality is not English. Currently PaWpD offers:</p> <ul> <li>Voice Client support (since 1.1.0)</li> <li>All Discord's encryption protocols including DAVE and old deprecated ones (since 1.1.0)</li> <li>Super Duper Easy command implementations</li> <li>Super Easy Buttons and Modals implementations (since 1.1.0)</li> <li>Option for easy modules creation without hard classes (since 1.1.0)</li> <li>All Basic discord client features including embeds?</li> <li>Client built with heart and memory and storage in mind (Seriously. That's the reason docs needs to be manually written. Scripts doesn't include any comments letting automatic docs work)</li> <li>Brit Transformer (Don't ask me why lol. PaWpD contains lowercase and uppercase transformers for all classes. This means no matter if you code pawpd.embed or pawpd.Embed it will work anyway)</li> </ul>"},{"location":"global/introduction/#whats-planned","title":"What's Planned?","text":"<p>Before I call PaWpD finished I will add these features:</p> <ul> <li>Voice Listening option for voice client (probably in 1.2.0 since I already attempted it in 1.1.0 but removed due to stability reasons)</li> <li>Sharding </li> <li>File object (surely in 1.2.0)</li> <li>More components from discord api page (Currently there is Button and Modal. Not including embed)</li> <li>Complete the Guild and User objects with more parameters and functions (probably in 1.2.0 or 1.3.0)</li> <li>Rate Limiting (I don't really know I don't like playing with the websocket timing)</li> <li>Gateway Session Resuming (Same as for above)</li> <li>More slash commands specific features (The field explaining thing and autocompletions)</li> <li>Reactions (probably in 1.2.0)</li> <li>Webhooks (maybe 1.2.0 or 1.3.0)</li> <li>Forums and Threads objects (1.2.0 or 1.3.0)</li> <li>More VoiceClient functions related to playing audio (will surely come out with the voice listening option)</li> <li>More colors (More is always better right?)</li> <li>Better error handlers (Am always improving them but there is always missing one or two)</li> </ul>"},{"location":"global/introduction/#how-frequently-are-updates-made","title":"How frequently are updates made?","text":"<p>It really depends on my mood or memory. 1.1.0 was biggest update so far yet it took me like 3 days to make. I just sometimes forget about my projects but when I do figure out I had one I come back and make big updates with improvements. This is just a hobby project. Not a thing that am getting paid for or requing you (users) to pay me for. But I would appreciate some support from your side for example using the package. It really makes me happy when someone likes my work. I do guarantee long support for this package though as I love to develop packages. </p>"},{"location":"global/introduction/#how-to-install-pawpd","title":"How to install PaWpD","text":"<p>It's super easy. Just go ahead and do: <pre><code>pip install pawpd\n</code></pre> if on windows: <pre><code>py -3 -m pip install pawpd\n</code></pre></p> <p>PaWpD has a few dependencies that will also be downloaded with it. These dependencies are:</p> <ul> <li>Websockets (and it's dependencies)</li> <li>Aiohttp (and it's dependencies)</li> </ul> <p>After doing all that. PaWpD should be ready to serve you. Regarding voice support. Please check Voice page. </p>"}]}